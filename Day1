1. Build Array from Permutation

   Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

   A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

   Example:-
   Input: nums = [0,2,1,5,3,4]
   Output: [0,1,2,4,5,3]
   Explanation: The array ans is built as follows: 
   ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
       = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
       = [0,1,2,4,5,3]
       
 Solution:- Brute Force Approach
            class Solution {
                public int[] buildArray(int[] nums) {
                    int[] arr = new int[nums.length];

                    for(int i = 0; i < nums.length; ++i){
                        arr[i] = nums[nums[i]];
                    }

                    return arr;
                }
            }
 
 
 
 
            Optimized Solution with O(1) space
            class Solution {
               public int[] buildArray(int[] nums) {
                  int n = nums.length;
        
                 for (int i = 0; i < n; i++)
                 {
                     nums[i] = nums[i] + (nums[nums[i]] % n) * n;
                 }

                 for (int i = 0; i < n; i++) 
                 {
                     nums[i] /= n;
                 }

                 return nums;
             }
            }
            
            
2. Concatenation of Array
   Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).
   
   Specifically, ans is the concatenation of two nums arrays.

   Return the array ans.
   
   Example:-
   Input: nums = [1,2,1]
   Output: [1,2,1,1,2,1]
   Explanation: The array ans is formed as follows:
   - ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
   - ans = [1,2,1,1,2,1]

Solution:- class Solution {
                public int[] getConcatenation(int[] nums) {
                    int n = nums.length;

                    int[] ans = new int[n * 2];

                    for(int i = 0; i < n; ++i){
                        ans[i] = nums[i];
                        ans[i + n] = nums[i];
                    }

                    return ans;
                }
            }
   
   
   
